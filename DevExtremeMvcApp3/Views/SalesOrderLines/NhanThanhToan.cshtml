



@helper Text(string Name, string Label, string size = "md3", string rules = "NotEmpty")
{
    <v-flex xs12 @size>
        <v-text-field v-model="item.@Name" :rules="@rules" outline label="@Label" placeholder=" "></v-text-field>
    </v-flex>
}
@helper Number(string Name, string Label, string size = "md3", string rules = "[]")
{
    <v-flex xs12 @size>
        <v-text-field type="number" v-model="item.@Name" :hide-details="true" autofocus  :rules="NotEmpty"  prepend-icon="chat" outline label="@Label" placeholder=" "></v-text-field>
    </v-flex>
}

@helper Date(string Name, string size = "md3")
{
    <v-flex xs12 @size>
        <v-dialog ref="dialog"
                  v-model="temp.modal_@Name"
                  lazy
                  full-width
                  width="290px">
            <v-text-field slot="activator"
                          v-model="item.@Name"
                          label="@Name"
                          placeholder=" "
                          outline :hide-details="true"
                          :rules="NotEmpty"
                          prepend-icon="event"
                          readonly></v-text-field>
            <v-date-picker @@change="temp.modal_@Name=false" v-model="item.@Name">
            </v-date-picker>
        </v-dialog>
    </v-flex>
}
<div id="app">
    <v-app id="inspire">
        <v-form v-model="valid">
            <label>Thông tin thanh toán</label>
            <div class="col-12 col-md-11 row">

                @Number("PaymentAmount", "Số tiền thanh toán")
                @Text("PaymentReceiveName", "Tên nhận thanh toán", "", "[]")
            </div>
            <v-btn @@click="submit" :disabled="!valid" color="info  " style="float:right">
                <v-icon dark>save</v-icon> &nbsp;
                Lưu lại
            </v-btn>
            <span style="font-size:30PX;float:right;color:orangered">  {{SAVE}} </span>

        </v-form>
    </v-app>
</div>

 
@(Html.DevExtreme().DataGrid<DevExtremeMvcApp3.Models.PaymentReceive>()
.DataSource(ds => ds.WebApi()
.RouteName("PaymentReceivesAPIApi")
.LoadAction("Get")
 .DeleteAction("Delete")
.Key("PaymentReceiveId")
)
.RemoteOperations(true)
.Columns(columns =>
{


 
 
columns.AddFor(m => m.PaymentAmount).Caption("Số tiền");

columns.AddFor(m => m.PaymentDate).DataType(GridColumnDataType.Date).Caption("Ngày nhận thanh toán");

columns.AddFor(m => m.PaymentReceiveName).Caption("Tên nhận thanh toán");

 }).Editing(e => e.Mode(GridEditMode.Popup)
 .AllowDeleting(true)
).Paging(p => p.PageSize(10))
.FilterRow(f => f.Visible(true))
.HeaderFilter(f => f.Visible(true))
.GroupPanel(p => p.Visible(false))
.Grouping(g => g.AutoExpandAll(false))
.RemoteOperations(true)
.ColumnMinWidth(150).ColumnResizingMode(ColumnResizingMode.Widget).AllowColumnResizing(true).Scrolling(z => z.ScrollByContent(true))
.Summary(s => s
.TotalItems(totalItems =>
{
totalItems.AddFor(m => m.PaymentReceiveId).SummaryType(SummaryType.Count);
})
.GroupItems(groupItems =>
{
groupItems.Add().SummaryType(SummaryType.Count);
})
)
)
<script>

    var app = new Vue({
        el: '#app',
        data: () => ({
            valid: false,
            item: {},
            temp: {},
             SAVE: "",
            NotEmpty: [
                v => !!v || 'Không được để trống',
            ],
        }),
        methods: {
            submit: function (event) {
                this.valid = false;
                this.SAVE = "Xin chờ chút, đang lưu dữ liệu....";

                $.ajax({
                    type: "POST",
                    url: "/SalesOrderLines/NhanThanhToan",
                    data: {
                        item: app.item
                    },
                    dataType: "json",
                    success: function (response) {
                        $('#myModal_ThemVatTu').modal('hide');
                            loadGrid();
                    }
                });

            }
        },
        watch: {
            "item.ProductId": function () {
                app.item.Price = 0;
                app.item.Quantity = 1;
                app.item.Amount = 0;

            }
            ,
            item:
                {
                handler: function (e) {
                    if ( app.item.Price  == 0)
                    {
                        var ItemProduct = app.Section.filter(function (animal) {
                                    return (
                                        animal.ProductId == app.item.ProductId);
                               });
                             if (ItemProduct.length==1) {
                                app.item.Amount = ItemProduct[0].DefaultBuyingPrice;
                                app.item.Price = ItemProduct[0].DefaultSellingPrice;
                            }
                        }

                     var total = Number(app.item.Price) * Number(app.item.Quantity) ;
                        app.item.Total = total + (total / 100 * Number(app.item.TaxAmount))+ Number(app.item.SubTotal);

                        if (total < app.item.Amount) {
                            app.SAVE = "Gía bán hiện đang nhỏ hơn giá nhập vào";
                        } else {
                            app.SAVE = "";

                        }
                }
                , deep: true

            }
        }

    })
    app.item.SalesOrderId = '@ViewBag.ID';
    $('#myModal_ThemVatTu').on('hidden.bs.modal', function (e) {
        loadGrid();
})
</script>
